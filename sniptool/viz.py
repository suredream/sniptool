# AUTOGENERATED! DO NOT EDIT! File to edit: 01_viz.ipynb (unless otherwise specified).

__all__ = []

# Cell
from nbdev.imports import *
# from fastcore.script import *
# from fastcore.foundation import *
# from keyword import iskeyword
# import nbformat

# Internal Cell
from glob import glob
import os
import time
import datetime
import base64
import pandas as pd
from io import BytesIO, StringIO
from PIL import Image
from IPython.core.magic import Magics, magics_class, line_magic, cell_magic
from IPython import display
from .core import getmtime_ms, get_change_file


def _export_output_image(path, folder='img', show_filename = True):
    if not os.path.exists(folder):
        os.mkdir(folder)
    notebook = json.load(open(path))
    for cell in notebook["cells"]:
        if not cell["source"]:
            continue
        head = cell["source"][0]
        if head.startswith("# !"): # contain images
            if show_filename:
                sys.stdout.write(path)
                sys.stdout.flush()
                show_filename = False

            oname = folder + "/" + head.lstrip("# !").strip()
            for output in cell["outputs"]:
                try:
                    img_png = output["data"]["image/png"]
                    im = Image.open(BytesIO(base64.b64decode(img_png)))
                    im.save(oname, "PNG")
                    sys.stdout.write(f"-- {oname} created.\n")
                    sys.stdout.flush()
                    break
                except:
                    pass

@magics_class
class AssetMagics(Magics):
    """snip magic for snippets management.
    Provides the %snip magic.
    """
    @line_magic
    def sa(self, line, last="last.txt", this='this.txt'):
        for path in get_change_file('*.ipynb',last, this):
            _export_output_image(path)

    @cell_magic
    def cached_plot(self, line: str, cell: str):
        "cached_plot <>"
        post = '\n'.join(['from matplotlib.pyplot import savefig',f'savefig("{line}")'])
        if os.path.isfile(line): # use cached
            return display.Image(line)
        else: # actual plotting and save to disk
            ip = get_ipython()
            ip.run_cell(cell+post)